// <auto-generated />
using System;
using HotelManager.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelManager.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20220619180641_recreation")]
    partial class recreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotelManager.DTO.ApartmentDTO", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.Property<int?>("AmountOfDrinks")
                        .HasColumnType("int");

                    b.Property<string>("ApartmentTypes")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("HasRoofZone")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfBeds")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfChildenBeds")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.ToTable("Apartment", (string)null);

                    b.HasData(
                        new
                        {
                            Number = 1,
                            ApartmentTypes = "Regular",
                            Area = 19.5f,
                            Description = "Description is here.",
                            NumberOfBeds = 2
                        },
                        new
                        {
                            Number = 2,
                            ApartmentTypes = "Penthouse",
                            Area = 19.5f,
                            Description = "Description is here.",
                            HasRoofZone = true,
                            NumberOfBeds = 3
                        },
                        new
                        {
                            Number = 3,
                            ApartmentTypes = "Family",
                            Area = 19.5f,
                            Description = "Description is here.",
                            NumberOfBeds = 2,
                            NumberOfChildenBeds = 2
                        });
                });

            modelBuilder.Entity("HotelManager.DTO.DamageReportDTO", b =>
                {
                    b.Property<int>("IdDamageReport")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDamageReport"), 1L, 1);

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdFacility")
                        .HasColumnType("int");

                    b.Property<int>("IdPorter")
                        .HasColumnType("int");

                    b.HasKey("IdDamageReport");

                    b.HasIndex("IdFacility");

                    b.HasIndex("IdPorter");

                    b.ToTable("DamageReport", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.DishDTO", b =>
                {
                    b.Property<int>("IdDish")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDish"), 1L, 1);

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("IdMenu")
                        .HasColumnType("int");

                    b.Property<bool>("IsVegeterian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdDish");

                    b.HasIndex("IdMenu");

                    b.ToTable("Dish", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.FacilityChangeRequestDTO", b =>
                {
                    b.Property<int>("IdFacilityChangeRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFacilityChangeRequest"), 1L, 1);

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfDecision")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("IdDamageReport")
                        .HasColumnType("int");

                    b.Property<int>("IdMaiden")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdFacilityChangeRequest");

                    b.HasIndex("IdDamageReport")
                        .IsUnique();

                    b.HasIndex("IdMaiden");

                    b.ToTable("FacilityChangeRequest", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.FacilityDTO", b =>
                {
                    b.Property<int>("IdFacility")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFacility"), 1L, 1);

                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("IdFacility");

                    b.HasIndex("IdRoom");

                    b.ToTable("Facility", (string)null);

                    b.HasData(
                        new
                        {
                            IdFacility = 1,
                            IdRoom = 1,
                            Manufacturer = "China",
                            Name = "Fride",
                            Price = 140.4f,
                            SerialNumber = "SR2312312",
                            Weight = 48.4f
                        },
                        new
                        {
                            IdFacility = 2,
                            IdRoom = 2,
                            Manufacturer = "Samsung",
                            Name = "TV",
                            Price = 249.4f,
                            SerialNumber = "SR23123122",
                            Weight = 50.4f
                        },
                        new
                        {
                            IdFacility = 3,
                            IdRoom = 3,
                            Manufacturer = "Ukraine",
                            Name = "Carpet",
                            Price = 16.9f,
                            SerialNumber = "SR32312312",
                            Weight = 9.4f
                        },
                        new
                        {
                            IdFacility = 4,
                            IdRoom = 4,
                            Manufacturer = "Poland SR",
                            Name = "Table",
                            Price = 16.9f,
                            Weight = 9.4f
                        },
                        new
                        {
                            IdFacility = 12,
                            IdRoom = 5,
                            Manufacturer = "Poland SR",
                            Name = "Table",
                            Price = 16.9f,
                            Weight = 9.4f
                        },
                        new
                        {
                            IdFacility = 5,
                            IdRoom = 6,
                            Manufacturer = "Poland SR",
                            Name = "Sofa",
                            Price = 99.9f,
                            Weight = 49.4f
                        },
                        new
                        {
                            IdFacility = 6,
                            IdRoom = 1,
                            Manufacturer = "Finland Corp",
                            Name = "Mirror",
                            Price = 99.9f,
                            Weight = 10.4f
                        },
                        new
                        {
                            IdFacility = 7,
                            IdRoom = 2,
                            Manufacturer = "Finland Corp",
                            Name = "Mirror",
                            Price = 99.9f,
                            Weight = 10.4f
                        },
                        new
                        {
                            IdFacility = 8,
                            IdRoom = 3,
                            Manufacturer = "Polska",
                            Name = "Stove",
                            Price = 99.9f,
                            Weight = 10.4f
                        },
                        new
                        {
                            IdFacility = 9,
                            IdRoom = 4,
                            Manufacturer = "Polska",
                            Name = "TV",
                            Price = 99.9f,
                            Weight = 10.4f
                        },
                        new
                        {
                            IdFacility = 10,
                            IdRoom = 5,
                            Manufacturer = "Polska",
                            Name = "Stove",
                            Price = 99.9f,
                            Weight = 10.4f
                        },
                        new
                        {
                            IdFacility = 11,
                            IdRoom = 6,
                            Manufacturer = "Polska",
                            Name = "Dishwasher",
                            Price = 99.9f,
                            Weight = 10.4f
                        });
                });

            modelBuilder.Entity("HotelManager.DTO.IngredientDishDTO", b =>
                {
                    b.Property<int>("IdDish")
                        .HasColumnType("int");

                    b.Property<int>("IdIngredient")
                        .HasColumnType("int");

                    b.HasKey("IdDish", "IdIngredient");

                    b.HasIndex("IdIngredient");

                    b.ToTable("IngredientDish", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.IngredientDTO", b =>
                {
                    b.Property<int>("IdIngredient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIngredient"), 1L, 1);

                    b.Property<bool>("IsVegeterian")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdIngredient");

                    b.ToTable("Ingredient", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.MenuDTO", b =>
                {
                    b.Property<int>("IdRestaurant")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdRestaurant");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.PersonDTO", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPerson"), 1L, 1);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("IdPerson");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.RentDTO", b =>
                {
                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("IdClient", "ApartmentNumber");

                    b.HasIndex("ApartmentNumber");

                    b.ToTable("Rent", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.ReservationDTO", b =>
                {
                    b.Property<int>("IdPorter")
                        .HasColumnType("int");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfReservation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfReservationCreation")
                        .HasColumnType("datetime2");

                    b.HasKey("IdPorter", "TableNumber");

                    b.HasIndex("TableNumber")
                        .IsUnique();

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.RestaurantDTO", b =>
                {
                    b.Property<int>("IdRestaurant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRestaurant"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdRestaurant");

                    b.ToTable("Restaurant", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.RoomDTO", b =>
                {
                    b.Property<int>("IdRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRoom"), 1L, 1);

                    b.Property<int>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdRoom");

                    b.HasIndex("ApartmentNumber");

                    b.ToTable("Room", (string)null);

                    b.HasData(
                        new
                        {
                            IdRoom = 1,
                            ApartmentNumber = 1,
                            Description = "Quite modern bedroom bla bla",
                            Name = "Bedroom"
                        },
                        new
                        {
                            IdRoom = 2,
                            ApartmentNumber = 2,
                            Description = "Quite modern bedroom bla bla",
                            Name = "Bedroom"
                        },
                        new
                        {
                            IdRoom = 3,
                            ApartmentNumber = 1,
                            Description = "Quite modern kitchen bla bla",
                            Name = "Kitchen"
                        },
                        new
                        {
                            IdRoom = 4,
                            ApartmentNumber = 3,
                            Description = "Quite modern bedroom bla bla",
                            Name = "Bedroom"
                        },
                        new
                        {
                            IdRoom = 5,
                            ApartmentNumber = 3,
                            Description = "Just after repairs bla bla",
                            Name = "Kids Room"
                        },
                        new
                        {
                            IdRoom = 6,
                            ApartmentNumber = 2,
                            Description = "Huge zone for something chillll",
                            Name = "Hall"
                        });
                });

            modelBuilder.Entity("HotelManager.DTO.TableDTO", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Number"), 1L, 1);

                    b.Property<int>("IdRestaurant")
                        .HasColumnType("int");

                    b.Property<bool>("IsIndoor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutdoor")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.Property<bool?>("_HasUmbrella")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("HasUmbrella");

                    b.Property<bool?>("_IsInSmokingAre")
                        .IsRequired()
                        .HasColumnType("bit")
                        .HasColumnName("IsInSmokingAre");

                    b.HasKey("Number");

                    b.HasIndex("IdRestaurant");

                    b.ToTable("Table", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.ChefDTO", b =>
                {
                    b.HasBaseType("HotelManager.DTO.PersonDTO");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdChef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdChef"), 1L, 1);

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdRestaurant")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PESEL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecifiedCuisine")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Workemail")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("IdRestaurant");

                    b.ToTable("Chef", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.ClientDTO", b =>
                {
                    b.HasBaseType("HotelManager.DTO.PersonDTO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"), 1L, 1);

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.MaidenDTO", b =>
                {
                    b.HasBaseType("HotelManager.DTO.PersonDTO");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdMaiden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMaiden"), 1L, 1);

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimalAmountOfApartmentsCleaned")
                        .HasMaxLength(12)
                        .HasColumnType("int");

                    b.Property<string>("PESEL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializedApartmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Workemail")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Maiden", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.ManagerDTO", b =>
                {
                    b.HasBaseType("HotelManager.DTO.PersonDTO");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdManager")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdManager"), 1L, 1);

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberOfSubordinates")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("PESEL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workemail")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Manager", (string)null);
                });

            modelBuilder.Entity("HotelManager.DTO.PorterDTO", b =>
                {
                    b.HasBaseType("HotelManager.DTO.PersonDTO");

                    b.Property<string>("EnglishLevel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdPorter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPorter"), 1L, 1);

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PESEL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Workemail")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Porter", (string)null);

                    b.HasData(
                        new
                        {
                            IdPerson = 1,
                            BirthDate = new DateTime(2022, 6, 19, 20, 6, 41, 299, DateTimeKind.Local).AddTicks(5876),
                            FirstName = "Valerii",
                            LastName = "Trembovetsky",
                            PhoneNumber = "888888888",
                            EnglishLevel = "intermediate",
                            HiringDate = new DateTime(2022, 6, 19, 20, 6, 41, 299, DateTimeKind.Local).AddTicks(5911),
                            IdEmployee = 1,
                            IdPorter = 1,
                            PESEL = "12312332111",
                            Password = "password",
                            Workemail = "vtrembovetsky@hotel.com"
                        });
                });

            modelBuilder.Entity("HotelManager.DTO.DamageReportDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.FacilityDTO", "Facility")
                        .WithMany("DamageReports")
                        .HasForeignKey("IdFacility")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManager.DTO.PorterDTO", "Porter")
                        .WithMany("DamageReports")
                        .HasForeignKey("IdPorter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Porter");
                });

            modelBuilder.Entity("HotelManager.DTO.DishDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.MenuDTO", "Menu")
                        .WithMany("Dishes")
                        .HasForeignKey("IdMenu")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("HotelManager.DTO.FacilityChangeRequestDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.DamageReportDTO", "DamageReport")
                        .WithOne("FacilityChangeRequest")
                        .HasForeignKey("HotelManager.DTO.FacilityChangeRequestDTO", "IdDamageReport")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManager.DTO.MaidenDTO", "Maiden")
                        .WithMany("FacilityChangeRequests")
                        .HasForeignKey("IdMaiden")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DamageReport");

                    b.Navigation("Maiden");
                });

            modelBuilder.Entity("HotelManager.DTO.FacilityDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.RoomDTO", "Room")
                        .WithMany("Facilities")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManager.DTO.IngredientDishDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.DishDTO", "Dish")
                        .WithMany("Ingredients")
                        .HasForeignKey("IdDish")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManager.DTO.IngredientDTO", "Ingredient")
                        .WithMany("Dishes")
                        .HasForeignKey("IdIngredient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("HotelManager.DTO.MenuDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.RestaurantDTO", "Restaurant")
                        .WithOne("Menu")
                        .HasForeignKey("HotelManager.DTO.MenuDTO", "IdRestaurant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("HotelManager.DTO.RentDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.ApartmentDTO", "Apartment")
                        .WithMany("Rents")
                        .HasForeignKey("ApartmentNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManager.DTO.ClientDTO", "Client")
                        .WithMany("Rents")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("HotelManager.DTO.ReservationDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.PorterDTO", "Porter")
                        .WithMany("Reservations")
                        .HasForeignKey("IdPorter")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HotelManager.DTO.TableDTO", "Table")
                        .WithOne("Reservation")
                        .HasForeignKey("HotelManager.DTO.ReservationDTO", "TableNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Porter");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("HotelManager.DTO.RoomDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.ApartmentDTO", "Apartment")
                        .WithMany("Rooms")
                        .HasForeignKey("ApartmentNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("HotelManager.DTO.TableDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.RestaurantDTO", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("IdRestaurant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("HotelManager.DTO.ChefDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.PersonDTO", null)
                        .WithOne()
                        .HasForeignKey("HotelManager.DTO.ChefDTO", "IdPerson")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("HotelManager.DTO.RestaurantDTO", "Restaurant")
                        .WithMany("Chefs")
                        .HasForeignKey("IdRestaurant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("HotelManager.DTO.ClientDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.PersonDTO", null)
                        .WithOne()
                        .HasForeignKey("HotelManager.DTO.ClientDTO", "IdPerson")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManager.DTO.MaidenDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.PersonDTO", null)
                        .WithOne()
                        .HasForeignKey("HotelManager.DTO.MaidenDTO", "IdPerson")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManager.DTO.ManagerDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.PersonDTO", null)
                        .WithOne()
                        .HasForeignKey("HotelManager.DTO.ManagerDTO", "IdPerson")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManager.DTO.PorterDTO", b =>
                {
                    b.HasOne("HotelManager.DTO.PersonDTO", null)
                        .WithOne()
                        .HasForeignKey("HotelManager.DTO.PorterDTO", "IdPerson")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManager.DTO.ApartmentDTO", b =>
                {
                    b.Navigation("Rents");

                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelManager.DTO.DamageReportDTO", b =>
                {
                    b.Navigation("FacilityChangeRequest");
                });

            modelBuilder.Entity("HotelManager.DTO.DishDTO", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("HotelManager.DTO.FacilityDTO", b =>
                {
                    b.Navigation("DamageReports");
                });

            modelBuilder.Entity("HotelManager.DTO.IngredientDTO", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("HotelManager.DTO.MenuDTO", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("HotelManager.DTO.RestaurantDTO", b =>
                {
                    b.Navigation("Chefs");

                    b.Navigation("Menu");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("HotelManager.DTO.RoomDTO", b =>
                {
                    b.Navigation("Facilities");
                });

            modelBuilder.Entity("HotelManager.DTO.TableDTO", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("HotelManager.DTO.ClientDTO", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("HotelManager.DTO.MaidenDTO", b =>
                {
                    b.Navigation("FacilityChangeRequests");
                });

            modelBuilder.Entity("HotelManager.DTO.PorterDTO", b =>
                {
                    b.Navigation("DamageReports");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
